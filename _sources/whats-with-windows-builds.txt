#################################
What's up with numpy and Windows?
#################################

If you're on Linux, you are probably used to your package manager.  You want
the basis scipy packages, so you do something like::

    sudo apt-get install python-numpy python-scipy python-matplotlib

If you're on a Mac, that you just brought home from the Apple store, you can
install Python from Python.org, and then do this::

    pip install numpy scipy matplotlib

``pip`` will download binary wheel packages, and install them; the whole
process will take around 30 seconds.

If you're on Windows, and you try the same thing with pip, all hell will
break loose.

Specifically, pip will download the source packages for numpy, scipy,
matplotlib, and then try and compile them.

Particularly for scipy, you are unlikely to have a compiler installed that can
do this - see: http://mingwpy.github.io/motivation.html

Unlike Mac, Windows has no default library for optimized linear algebra
routines (BLAS, LAPACK).  If you have no BLAS / LAPACK library, scipy
compilation will fail.  Numpy compilation will work by falling back to default
and very slow implementations, but the resulting numpy installation would
likely be painful to use for any significant numerical work.

The obvious thing for us numpy-ers to do, is to compile up Windows binary
wheels that do include a fast BLAS / LAPACK library.  Unfortunately, this is
not at all easy for the following reasons.  See : `mingpy background
<http://mingwpy.github.io/background.html>`_ and `mingpy issues
<http://mingwpy.github.io/issues.html>`_ for more detail.

* The choice of BLAS / LAPACK library is not clear : see
  [[Numerical software on Windows]].  In particular there are still some
  problems with OpenBLAS that need resolving;
* The standard Python.org Windows installers use MS Visual C++.  We can't use
  MSVC++ to compile scipy because we need a Fortran compiler.  Compiling
  OpenBLAS with Visual Studio gives `poor performance
  <https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio#2-cmake-and-visual-studio>`_,
  and compiling ATLAS with Visual Studio is not supported.  Thus we need
  another compiler.  This is likely to be `mingw <http://mingw.org/>`_ or
  `mingw-w64 <http://mingw-w64.org>`_.  The current (December 2015) release
  build process for Windows uses an old copy of mingw, which does not have
  gfortran.  mingw cannot build 64-bit applications, nor can it build
  libraries compatible with libraries built with MSVC 14 / 2015 (Python 3.5 is
  built with MSVC 14);
* Mingw-w64 is the obvious choice for a compiler, but it has some numerical
  problems due to differences in gcc default / MSVC default floating point
  precision (see `math precision issues
  <http://mingwpy.github.io/issues.html#math-precision-issues>`_.  These give
  some floating point errors on numpy / scipy testing.  Mingw-w64, like mingw,
  cannot yet link to the MSVC 14 / 2015 runtimes needed for Python 3.5
  extensions.
